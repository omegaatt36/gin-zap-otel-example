// Code generated by go-enum DO NOT EDIT.
// Version: 0.5.7
// Revision: bf63e108589bbd2327b13ec2c5da532aad234029
// Build Date: 2023-07-25T23:27:55Z
// Built By: goreleaser

package logging

import (
	"errors"
	"fmt"
)

const (
	// SeverityDefault is a severity of type Default.
	SeverityDefault severity = "DEFAULT"
	// SeverityDebug is a severity of type Debug.
	SeverityDebug severity = "DEBUG"
	// SeverityInfo is a severity of type Info.
	SeverityInfo severity = "INFO"
	// SeverityNotice is a severity of type Notice.
	SeverityNotice severity = "NOTICE"
	// SeverityWarning is a severity of type Warning.
	SeverityWarning severity = "WARNING"
	// SeverityError is a severity of type Error.
	SeverityError severity = "ERROR"
	// SeverityCritical is a severity of type Critical.
	SeverityCritical severity = "CRITICAL"
	// SeverityAlert is a severity of type Alert.
	SeverityAlert severity = "ALERT"
	// SeverityEmergency is a severity of type Emergency.
	SeverityEmergency severity = "EMERGENCY"
)

var ErrInvalidseverity = errors.New("not a valid severity")

// String implements the Stringer interface.
func (x severity) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x severity) IsValid() bool {
	_, err := Parseseverity(string(x))
	return err == nil
}

var _severityValue = map[string]severity{
	"DEFAULT":   SeverityDefault,
	"DEBUG":     SeverityDebug,
	"INFO":      SeverityInfo,
	"NOTICE":    SeverityNotice,
	"WARNING":   SeverityWarning,
	"ERROR":     SeverityError,
	"CRITICAL":  SeverityCritical,
	"ALERT":     SeverityAlert,
	"EMERGENCY": SeverityEmergency,
}

// Parseseverity attempts to convert a string to a severity.
func Parseseverity(name string) (severity, error) {
	if x, ok := _severityValue[name]; ok {
		return x, nil
	}
	return severity(""), fmt.Errorf("%s is %w", name, ErrInvalidseverity)
}
